Terminals unused in grammar

   SETOR
   SETAND
   SETXOR
   SETLSH
   SETRSH
   DO
   FOR
   SWITCH
   CASE
   DEFAULT
   GOTO
   UNSIGNED
   TYPEDEF
   STRUCT
   UNION
   STATIC
   EXTERN
   AUTO
   REGISTER


Grammar

    0 $accept: top $end

    1 top: %empty
    2    | function top

    3 function: func_signature '{' func_body '}'

    4 func_signature: type ID '(' args ')'

    5 func_body: blockbody

    6 args: %empty
    7     | expr
    8     | expr ',' args

    9 func_call: ID '(' args ')'

   10 decl: type ID ';'
   11     | type ID '[' expr ']' ';'
   12     | type ptrtail ID ';'
   13     | type ptrtail ID '[' expr ']'

   14 ptrtail: ptrtail MUL
   15        | MUL

   16 blockbody: %empty
   17          | statement blockbody
   18          | decl blockbody

   19 statement: openstatem
   20          | closedstatem

   21 simstatement: ID SET expr ';'
   22             | RETURN expr ';'
   23             | func_call
   24             | '{' blockbody '}'
   25             | BREAK ';'
   26             | CONTINUE ';'
   27             | ';'

   28 closedstatem: simstatement
   29             | IF '(' expr ')' closedstatem ELSE closedstatem
   30             | loop closedstatem

   31 openstatem: IF '(' expr ')' statement
   32           | IF '(' expr ')' closedstatem ELSE openstatem
   33           | loop openstatem

   34 loop: WHILE '(' expr ')'

   35 expr: type ID
   36     | type ID '[' ']'
   37     | type ptrtail ID
   38     | type ptrtail ID '[' ']'
   39     | assignex

   40 assignex: mutable SETADD assignex
   41         | mutable SETSUB assignex
   42         | mutable SETMUL assignex
   43         | mutable SETDIV assignex
   44         | mutable SETMOD assignex
   45         | mutable '+' '+'
   46         | mutable '-' '-'
   47         | orex

   48 orex: orex OR andex
   49     | andex

   50 andex: andex AND bitex
   51      | bitex

   52 bitex: bitex BITAND relex
   53      | bitex BITXOR relex
   54      | bitex BITOR relex
   55      | relex

   56 relex: relex LT shiftex
   57      | relex GT shiftex
   58      | relex LE shiftex
   59      | relex GE shiftex
   60      | relex EQ shiftex
   61      | relex NE shiftex
   62      | shiftex

   63 shiftex: shiftex RSH addex
   64        | shiftex LSH addex
   65        | addex

   66 addex: addex ADD mulex
   67      | addex SUB mulex
   68      | mulex

   69 mulex: mulex MUL unaryex
   70      | mulex DIV unaryex
   71      | mulex MOD unaryex
   72      | unaryex

   73 unaryex: '-' unaryex
   74        | '+' unaryex
   75        | NOT unaryex
   76        | COM unaryex
   77        | MUL unaryex
   78        | '(' type ')' unaryex
   79        | SIZEOF unaryex
   80        | mutable

   81 mutable: ID
   82        | arrex
   83        | immutable

   84 immutable: CONST ID
   85          | '(' expr ')'
   86          | func_call
   87          | primex

   88 arrex: ID '[' expr ']'

   89 primex: INTVAL
   90       | STRVAL
   91       | CHARVAL
   92       | DBLVAL
   93       | FLTVAL

   94 type: VOID
   95     | CHAR
   96     | SHORT
   97     | INT
   98     | LONG
   99     | FLOAT
  100     | DOUBLE
  101     | MUL type


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 9 29 31 32 34 78 85
')' (41) 4 9 29 31 32 34 78 85
'+' (43) 45 74
',' (44) 8
'-' (45) 46 73
';' (59) 10 11 12 21 22 25 26 27
'[' (91) 11 13 36 38 88
']' (93) 11 13 36 38 88
'{' (123) 3 24
'}' (125) 3 24
error (256)
ID (258) 4 9 10 11 12 13 21 35 36 37 38 81 84 88
INTVAL (259) 89
FLTVAL (260) 93
DBLVAL (261) 92
STRVAL (262) 90
CHARVAL (263) 91
VOID (264) 94
CHAR (265) 95
SHORT (266) 96
INT (267) 97
LONG (268) 98
FLOAT (269) 99
DOUBLE (270) 100
EQ (271) 60
NE (272) 61
GE (273) 59
LE (274) 58
GT (275) 57
LT (276) 56
ADD (277) 66
SUB (278) 67
MUL (279) 14 15 69 77 101
DIV (280) 70
MOD (281) 71
OR (282) 48
AND (283) 50
BITOR (284) 54
BITAND (285) 52
BITXOR (286) 53
NOT (287) 75
COM (288) 76
LSH (289) 64
RSH (290) 63
SET (291) 21
SETADD (292) 40
SETSUB (293) 41
SETMUL (294) 42
SETDIV (295) 43
SETMOD (296) 44
SETOR (297)
SETAND (298)
SETXOR (299)
SETLSH (300)
SETRSH (301)
RETURN (302) 22
DO (303)
WHILE (304) 34
FOR (305)
SWITCH (306)
CASE (307)
DEFAULT (308)
IF (309) 29 31 32
ELSE (310) 29 32
CONTINUE (311) 26
BREAK (312) 25
GOTO (313)
UNSIGNED (314)
TYPEDEF (315)
STRUCT (316)
UNION (317)
CONST (318) 84
STATIC (319)
EXTERN (320)
AUTO (321)
REGISTER (322)
SIZEOF (323) 79


Nonterminals, with rules where they appear

$accept (79)
    on left: 0
top (80)
    on left: 1 2, on right: 0 2
function (81)
    on left: 3, on right: 2
func_signature (82)
    on left: 4, on right: 3
func_body (83)
    on left: 5, on right: 3
args (84)
    on left: 6 7 8, on right: 4 8 9
func_call (85)
    on left: 9, on right: 23 86
decl (86)
    on left: 10 11 12 13, on right: 18
ptrtail (87)
    on left: 14 15, on right: 12 13 14 37 38
blockbody (88)
    on left: 16 17 18, on right: 5 17 18 24
statement (89)
    on left: 19 20, on right: 17 31
simstatement (90)
    on left: 21 22 23 24 25 26 27, on right: 28
closedstatem (91)
    on left: 28 29 30, on right: 20 29 30 32
openstatem (92)
    on left: 31 32 33, on right: 19 32 33
loop (93)
    on left: 34, on right: 30 33
expr (94)
    on left: 35 36 37 38 39, on right: 7 8 11 13 21 22 29 31 32 34
    85 88
assignex (95)
    on left: 40 41 42 43 44 45 46 47, on right: 39 40 41 42 43 44
orex (96)
    on left: 48 49, on right: 47 48
andex (97)
    on left: 50 51, on right: 48 49 50
bitex (98)
    on left: 52 53 54 55, on right: 50 51 52 53 54
relex (99)
    on left: 56 57 58 59 60 61 62, on right: 52 53 54 55 56 57 58 59
    60 61
shiftex (100)
    on left: 63 64 65, on right: 56 57 58 59 60 61 62 63 64
addex (101)
    on left: 66 67 68, on right: 63 64 65 66 67
mulex (102)
    on left: 69 70 71 72, on right: 66 67 68 69 70 71
unaryex (103)
    on left: 73 74 75 76 77 78 79 80, on right: 69 70 71 72 73 74 75
    76 77 78 79
mutable (104)
    on left: 81 82 83, on right: 40 41 42 43 44 45 46 80
immutable (105)
    on left: 84 85 86 87, on right: 83
arrex (106)
    on left: 88, on right: 82
primex (107)
    on left: 89 90 91 92 93, on right: 87
type (108)
    on left: 94 95 96 97 98 99 100 101, on right: 4 10 11 12 13 35
    36 37 38 78 101


State 0

    0 $accept: . top $end

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    MUL     shift, and go to state 8

    $default  reduce using rule 1 (top)

    top             go to state 9
    function        go to state 10
    func_signature  go to state 11
    type            go to state 12


State 1

   94 type: VOID .

    $default  reduce using rule 94 (type)


State 2

   95 type: CHAR .

    $default  reduce using rule 95 (type)


State 3

   96 type: SHORT .

    $default  reduce using rule 96 (type)


State 4

   97 type: INT .

    $default  reduce using rule 97 (type)


State 5

   98 type: LONG .

    $default  reduce using rule 98 (type)


State 6

   99 type: FLOAT .

    $default  reduce using rule 99 (type)


State 7

  100 type: DOUBLE .

    $default  reduce using rule 100 (type)


State 8

  101 type: MUL . type

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    MUL     shift, and go to state 8

    type  go to state 13


State 9

    0 $accept: top . $end

    $end  shift, and go to state 14


State 10

    2 top: function . top

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    MUL     shift, and go to state 8

    $default  reduce using rule 1 (top)

    top             go to state 15
    function        go to state 10
    func_signature  go to state 11
    type            go to state 12


State 11

    3 function: func_signature . '{' func_body '}'

    '{'  shift, and go to state 16


State 12

    4 func_signature: type . ID '(' args ')'

    ID  shift, and go to state 17


State 13

  101 type: MUL type .

    $default  reduce using rule 101 (type)


State 14

    0 $accept: top $end .

    $default  accept


State 15

    2 top: function top .

    $default  reduce using rule 2 (top)


State 16

    3 function: func_signature '{' . func_body '}'

    ID        shift, and go to state 18
    VOID      shift, and go to state 1
    CHAR      shift, and go to state 2
    SHORT     shift, and go to state 3
    INT       shift, and go to state 4
    LONG      shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    MUL       shift, and go to state 8
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    $default  reduce using rule 16 (blockbody)

    func_body     go to state 26
    func_call     go to state 27
    decl          go to state 28
    blockbody     go to state 29
    statement     go to state 30
    simstatement  go to state 31
    closedstatem  go to state 32
    openstatem    go to state 33
    loop          go to state 34
    type          go to state 35


State 17

    4 func_signature: type ID . '(' args ')'

    '('  shift, and go to state 36


State 18

    9 func_call: ID . '(' args ')'
   21 simstatement: ID . SET expr ';'

    SET  shift, and go to state 37
    '('  shift, and go to state 38


State 19

   22 simstatement: RETURN . expr ';'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 54
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 20

   34 loop: WHILE . '(' expr ')'

    '('  shift, and go to state 69


State 21

   29 closedstatem: IF . '(' expr ')' closedstatem ELSE closedstatem
   31 openstatem: IF . '(' expr ')' statement
   32           | IF . '(' expr ')' closedstatem ELSE openstatem

    '('  shift, and go to state 70


State 22

   26 simstatement: CONTINUE . ';'

    ';'  shift, and go to state 71


State 23

   25 simstatement: BREAK . ';'

    ';'  shift, and go to state 72


State 24

   24 simstatement: '{' . blockbody '}'

    ID        shift, and go to state 18
    VOID      shift, and go to state 1
    CHAR      shift, and go to state 2
    SHORT     shift, and go to state 3
    INT       shift, and go to state 4
    LONG      shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    MUL       shift, and go to state 8
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    $default  reduce using rule 16 (blockbody)

    func_call     go to state 27
    decl          go to state 28
    blockbody     go to state 73
    statement     go to state 30
    simstatement  go to state 31
    closedstatem  go to state 32
    openstatem    go to state 33
    loop          go to state 34
    type          go to state 35


State 25

   27 simstatement: ';' .

    $default  reduce using rule 27 (simstatement)


State 26

    3 function: func_signature '{' func_body . '}'

    '}'  shift, and go to state 74


State 27

   23 simstatement: func_call .

    $default  reduce using rule 23 (simstatement)


State 28

   18 blockbody: decl . blockbody

    ID        shift, and go to state 18
    VOID      shift, and go to state 1
    CHAR      shift, and go to state 2
    SHORT     shift, and go to state 3
    INT       shift, and go to state 4
    LONG      shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    MUL       shift, and go to state 8
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    $default  reduce using rule 16 (blockbody)

    func_call     go to state 27
    decl          go to state 28
    blockbody     go to state 75
    statement     go to state 30
    simstatement  go to state 31
    closedstatem  go to state 32
    openstatem    go to state 33
    loop          go to state 34
    type          go to state 35


State 29

    5 func_body: blockbody .

    $default  reduce using rule 5 (func_body)


State 30

   17 blockbody: statement . blockbody

    ID        shift, and go to state 18
    VOID      shift, and go to state 1
    CHAR      shift, and go to state 2
    SHORT     shift, and go to state 3
    INT       shift, and go to state 4
    LONG      shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    MUL       shift, and go to state 8
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    $default  reduce using rule 16 (blockbody)

    func_call     go to state 27
    decl          go to state 28
    blockbody     go to state 76
    statement     go to state 30
    simstatement  go to state 31
    closedstatem  go to state 32
    openstatem    go to state 33
    loop          go to state 34
    type          go to state 35


State 31

   28 closedstatem: simstatement .

    $default  reduce using rule 28 (closedstatem)


State 32

   20 statement: closedstatem .

    $default  reduce using rule 20 (statement)


State 33

   19 statement: openstatem .

    $default  reduce using rule 19 (statement)


State 34

   30 closedstatem: loop . closedstatem
   33 openstatem: loop . openstatem

    ID        shift, and go to state 18
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    func_call     go to state 27
    simstatement  go to state 31
    closedstatem  go to state 77
    openstatem    go to state 78
    loop          go to state 34


State 35

   10 decl: type . ID ';'
   11     | type . ID '[' expr ']' ';'
   12     | type . ptrtail ID ';'
   13     | type . ptrtail ID '[' expr ']'

    ID   shift, and go to state 79
    MUL  shift, and go to state 80

    ptrtail  go to state 81


State 36

    4 func_signature: type ID '(' . args ')'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    $default  reduce using rule 6 (args)

    args       go to state 82
    func_call  go to state 53
    expr       go to state 83
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 37

   21 simstatement: ID SET . expr ';'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 84
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 38

    9 func_call: ID '(' . args ')'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    $default  reduce using rule 6 (args)

    args       go to state 85
    func_call  go to state 53
    expr       go to state 83
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 39

    9 func_call: ID . '(' args ')'
   81 mutable: ID .
   88 arrex: ID . '[' expr ']'

    '('  shift, and go to state 38
    '['  shift, and go to state 86

    $default  reduce using rule 81 (mutable)


State 40

   89 primex: INTVAL .

    $default  reduce using rule 89 (primex)


State 41

   93 primex: FLTVAL .

    $default  reduce using rule 93 (primex)


State 42

   92 primex: DBLVAL .

    $default  reduce using rule 92 (primex)


State 43

   90 primex: STRVAL .

    $default  reduce using rule 90 (primex)


State 44

   91 primex: CHARVAL .

    $default  reduce using rule 91 (primex)


State 45

   77 unaryex: MUL . unaryex
  101 type: MUL . type

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 87
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 13


State 46

   75 unaryex: NOT . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 90
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 47

   76 unaryex: COM . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 91
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 48

   84 immutable: CONST . ID

    ID  shift, and go to state 92


State 49

   79 unaryex: SIZEOF . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 93
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 50

   78 unaryex: '(' . type ')' unaryex
   85 immutable: '(' . expr ')'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 94
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 95


State 51

   74 unaryex: '+' . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 96
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 52

   73 unaryex: '-' . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 97
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 53

   86 immutable: func_call .

    $default  reduce using rule 86 (immutable)


State 54

   22 simstatement: RETURN expr . ';'

    ';'  shift, and go to state 98


State 55

   39 expr: assignex .

    $default  reduce using rule 39 (expr)


State 56

   47 assignex: orex .
   48 orex: orex . OR andex

    OR  shift, and go to state 99

    $default  reduce using rule 47 (assignex)


State 57

   49 orex: andex .
   50 andex: andex . AND bitex

    AND  shift, and go to state 100

    $default  reduce using rule 49 (orex)


State 58

   51 andex: bitex .
   52 bitex: bitex . BITAND relex
   53      | bitex . BITXOR relex
   54      | bitex . BITOR relex

    BITOR   shift, and go to state 101
    BITAND  shift, and go to state 102
    BITXOR  shift, and go to state 103

    $default  reduce using rule 51 (andex)


State 59

   55 bitex: relex .
   56 relex: relex . LT shiftex
   57      | relex . GT shiftex
   58      | relex . LE shiftex
   59      | relex . GE shiftex
   60      | relex . EQ shiftex
   61      | relex . NE shiftex

    EQ  shift, and go to state 104
    NE  shift, and go to state 105
    GE  shift, and go to state 106
    LE  shift, and go to state 107
    GT  shift, and go to state 108
    LT  shift, and go to state 109

    $default  reduce using rule 55 (bitex)


State 60

   62 relex: shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 62 (relex)


State 61

   65 shiftex: addex .
   66 addex: addex . ADD mulex
   67      | addex . SUB mulex

    ADD  shift, and go to state 112
    SUB  shift, and go to state 113

    $default  reduce using rule 65 (shiftex)


State 62

   68 addex: mulex .
   69 mulex: mulex . MUL unaryex
   70      | mulex . DIV unaryex
   71      | mulex . MOD unaryex

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    $default  reduce using rule 68 (addex)


State 63

   72 mulex: unaryex .

    $default  reduce using rule 72 (mulex)


State 64

   40 assignex: mutable . SETADD assignex
   41         | mutable . SETSUB assignex
   42         | mutable . SETMUL assignex
   43         | mutable . SETDIV assignex
   44         | mutable . SETMOD assignex
   45         | mutable . '+' '+'
   46         | mutable . '-' '-'
   80 unaryex: mutable .

    SETADD  shift, and go to state 117
    SETSUB  shift, and go to state 118
    SETMUL  shift, and go to state 119
    SETDIV  shift, and go to state 120
    SETMOD  shift, and go to state 121
    '+'     shift, and go to state 122
    '-'     shift, and go to state 123

    $default  reduce using rule 80 (unaryex)


State 65

   83 mutable: immutable .

    $default  reduce using rule 83 (mutable)


State 66

   82 mutable: arrex .

    $default  reduce using rule 82 (mutable)


State 67

   87 immutable: primex .

    $default  reduce using rule 87 (immutable)


State 68

   35 expr: type . ID
   36     | type . ID '[' ']'
   37     | type . ptrtail ID
   38     | type . ptrtail ID '[' ']'

    ID   shift, and go to state 124
    MUL  shift, and go to state 80

    ptrtail  go to state 125


State 69

   34 loop: WHILE '(' . expr ')'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 126
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 70

   29 closedstatem: IF '(' . expr ')' closedstatem ELSE closedstatem
   31 openstatem: IF '(' . expr ')' statement
   32           | IF '(' . expr ')' closedstatem ELSE openstatem

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 127
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 71

   26 simstatement: CONTINUE ';' .

    $default  reduce using rule 26 (simstatement)


State 72

   25 simstatement: BREAK ';' .

    $default  reduce using rule 25 (simstatement)


State 73

   24 simstatement: '{' blockbody . '}'

    '}'  shift, and go to state 128


State 74

    3 function: func_signature '{' func_body '}' .

    $default  reduce using rule 3 (function)


State 75

   18 blockbody: decl blockbody .

    $default  reduce using rule 18 (blockbody)


State 76

   17 blockbody: statement blockbody .

    $default  reduce using rule 17 (blockbody)


State 77

   30 closedstatem: loop closedstatem .

    $default  reduce using rule 30 (closedstatem)


State 78

   33 openstatem: loop openstatem .

    $default  reduce using rule 33 (openstatem)


State 79

   10 decl: type ID . ';'
   11     | type ID . '[' expr ']' ';'

    ';'  shift, and go to state 129
    '['  shift, and go to state 130


State 80

   15 ptrtail: MUL .

    $default  reduce using rule 15 (ptrtail)


State 81

   12 decl: type ptrtail . ID ';'
   13     | type ptrtail . ID '[' expr ']'
   14 ptrtail: ptrtail . MUL

    ID   shift, and go to state 131
    MUL  shift, and go to state 132


State 82

    4 func_signature: type ID '(' args . ')'

    ')'  shift, and go to state 133


State 83

    7 args: expr .
    8     | expr . ',' args

    ','  shift, and go to state 134

    $default  reduce using rule 7 (args)


State 84

   21 simstatement: ID SET expr . ';'

    ';'  shift, and go to state 135


State 85

    9 func_call: ID '(' args . ')'

    ')'  shift, and go to state 136


State 86

   88 arrex: ID '[' . expr ']'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 137
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 87

   77 unaryex: MUL unaryex .

    $default  reduce using rule 77 (unaryex)


State 88

   80 unaryex: mutable .

    $default  reduce using rule 80 (unaryex)


State 89

   77 unaryex: MUL . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 87
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 90

   75 unaryex: NOT unaryex .

    $default  reduce using rule 75 (unaryex)


State 91

   76 unaryex: COM unaryex .

    $default  reduce using rule 76 (unaryex)


State 92

   84 immutable: CONST ID .

    $default  reduce using rule 84 (immutable)


State 93

   79 unaryex: SIZEOF unaryex .

    $default  reduce using rule 79 (unaryex)


State 94

   85 immutable: '(' expr . ')'

    ')'  shift, and go to state 138


State 95

   35 expr: type . ID
   36     | type . ID '[' ']'
   37     | type . ptrtail ID
   38     | type . ptrtail ID '[' ']'
   78 unaryex: '(' type . ')' unaryex

    ID   shift, and go to state 124
    MUL  shift, and go to state 80
    ')'  shift, and go to state 139

    ptrtail  go to state 125


State 96

   74 unaryex: '+' unaryex .

    $default  reduce using rule 74 (unaryex)


State 97

   73 unaryex: '-' unaryex .

    $default  reduce using rule 73 (unaryex)


State 98

   22 simstatement: RETURN expr ';' .

    $default  reduce using rule 22 (simstatement)


State 99

   48 orex: orex OR . andex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    andex      go to state 140
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 100

   50 andex: andex AND . bitex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    bitex      go to state 141
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 101

   54 bitex: bitex BITOR . relex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    relex      go to state 142
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 102

   52 bitex: bitex BITAND . relex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    relex      go to state 143
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 103

   53 bitex: bitex BITXOR . relex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    relex      go to state 144
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 104

   60 relex: relex EQ . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 145
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 105

   61 relex: relex NE . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 146
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 106

   59 relex: relex GE . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 147
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 107

   58 relex: relex LE . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 148
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 108

   57 relex: relex GT . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 149
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 109

   56 relex: relex LT . shiftex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    shiftex    go to state 150
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 110

   64 shiftex: shiftex LSH . addex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    addex      go to state 151
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 111

   63 shiftex: shiftex RSH . addex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    addex      go to state 152
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 112

   66 addex: addex ADD . mulex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    mulex      go to state 153
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 113

   67 addex: addex SUB . mulex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    mulex      go to state 154
    unaryex    go to state 63
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 114

   69 mulex: mulex MUL . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 155
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 115

   70 mulex: mulex DIV . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 156
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 116

   71 mulex: mulex MOD . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 157
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 117

   40 assignex: mutable SETADD . assignex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    assignex   go to state 158
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 118

   41 assignex: mutable SETSUB . assignex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    assignex   go to state 159
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 119

   42 assignex: mutable SETMUL . assignex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    assignex   go to state 160
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 120

   43 assignex: mutable SETDIV . assignex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    assignex   go to state 161
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 121

   44 assignex: mutable SETMOD . assignex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    assignex   go to state 162
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 122

   45 assignex: mutable '+' . '+'

    '+'  shift, and go to state 163


State 123

   46 assignex: mutable '-' . '-'

    '-'  shift, and go to state 164


State 124

   35 expr: type ID .
   36     | type ID . '[' ']'

    '['  shift, and go to state 165

    $default  reduce using rule 35 (expr)


State 125

   14 ptrtail: ptrtail . MUL
   37 expr: type ptrtail . ID
   38     | type ptrtail . ID '[' ']'

    ID   shift, and go to state 166
    MUL  shift, and go to state 132


State 126

   34 loop: WHILE '(' expr . ')'

    ')'  shift, and go to state 167


State 127

   29 closedstatem: IF '(' expr . ')' closedstatem ELSE closedstatem
   31 openstatem: IF '(' expr . ')' statement
   32           | IF '(' expr . ')' closedstatem ELSE openstatem

    ')'  shift, and go to state 168


State 128

   24 simstatement: '{' blockbody '}' .

    $default  reduce using rule 24 (simstatement)


State 129

   10 decl: type ID ';' .

    $default  reduce using rule 10 (decl)


State 130

   11 decl: type ID '[' . expr ']' ';'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 169
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 131

   12 decl: type ptrtail ID . ';'
   13     | type ptrtail ID . '[' expr ']'

    ';'  shift, and go to state 170
    '['  shift, and go to state 171


State 132

   14 ptrtail: ptrtail MUL .

    $default  reduce using rule 14 (ptrtail)


State 133

    4 func_signature: type ID '(' args ')' .

    $default  reduce using rule 4 (func_signature)


State 134

    8 args: expr ',' . args

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    $default  reduce using rule 6 (args)

    args       go to state 172
    func_call  go to state 53
    expr       go to state 83
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 135

   21 simstatement: ID SET expr ';' .

    $default  reduce using rule 21 (simstatement)


State 136

    9 func_call: ID '(' args ')' .

    $default  reduce using rule 9 (func_call)


State 137

   88 arrex: ID '[' expr . ']'

    ']'  shift, and go to state 173


State 138

   85 immutable: '(' expr ')' .

    $default  reduce using rule 85 (immutable)


State 139

   78 unaryex: '(' type ')' . unaryex

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    MUL      shift, and go to state 89
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    unaryex    go to state 174
    mutable    go to state 88
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67


State 140

   48 orex: orex OR andex .
   50 andex: andex . AND bitex

    AND  shift, and go to state 100

    $default  reduce using rule 48 (orex)


State 141

   50 andex: andex AND bitex .
   52 bitex: bitex . BITAND relex
   53      | bitex . BITXOR relex
   54      | bitex . BITOR relex

    BITOR   shift, and go to state 101
    BITAND  shift, and go to state 102
    BITXOR  shift, and go to state 103

    $default  reduce using rule 50 (andex)


State 142

   54 bitex: bitex BITOR relex .
   56 relex: relex . LT shiftex
   57      | relex . GT shiftex
   58      | relex . LE shiftex
   59      | relex . GE shiftex
   60      | relex . EQ shiftex
   61      | relex . NE shiftex

    EQ  shift, and go to state 104
    NE  shift, and go to state 105
    GE  shift, and go to state 106
    LE  shift, and go to state 107
    GT  shift, and go to state 108
    LT  shift, and go to state 109

    $default  reduce using rule 54 (bitex)


State 143

   52 bitex: bitex BITAND relex .
   56 relex: relex . LT shiftex
   57      | relex . GT shiftex
   58      | relex . LE shiftex
   59      | relex . GE shiftex
   60      | relex . EQ shiftex
   61      | relex . NE shiftex

    EQ  shift, and go to state 104
    NE  shift, and go to state 105
    GE  shift, and go to state 106
    LE  shift, and go to state 107
    GT  shift, and go to state 108
    LT  shift, and go to state 109

    $default  reduce using rule 52 (bitex)


State 144

   53 bitex: bitex BITXOR relex .
   56 relex: relex . LT shiftex
   57      | relex . GT shiftex
   58      | relex . LE shiftex
   59      | relex . GE shiftex
   60      | relex . EQ shiftex
   61      | relex . NE shiftex

    EQ  shift, and go to state 104
    NE  shift, and go to state 105
    GE  shift, and go to state 106
    LE  shift, and go to state 107
    GT  shift, and go to state 108
    LT  shift, and go to state 109

    $default  reduce using rule 53 (bitex)


State 145

   60 relex: relex EQ shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 60 (relex)


State 146

   61 relex: relex NE shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 61 (relex)


State 147

   59 relex: relex GE shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 59 (relex)


State 148

   58 relex: relex LE shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 58 (relex)


State 149

   57 relex: relex GT shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 57 (relex)


State 150

   56 relex: relex LT shiftex .
   63 shiftex: shiftex . RSH addex
   64        | shiftex . LSH addex

    LSH  shift, and go to state 110
    RSH  shift, and go to state 111

    $default  reduce using rule 56 (relex)


State 151

   64 shiftex: shiftex LSH addex .
   66 addex: addex . ADD mulex
   67      | addex . SUB mulex

    ADD  shift, and go to state 112
    SUB  shift, and go to state 113

    $default  reduce using rule 64 (shiftex)


State 152

   63 shiftex: shiftex RSH addex .
   66 addex: addex . ADD mulex
   67      | addex . SUB mulex

    ADD  shift, and go to state 112
    SUB  shift, and go to state 113

    $default  reduce using rule 63 (shiftex)


State 153

   66 addex: addex ADD mulex .
   69 mulex: mulex . MUL unaryex
   70      | mulex . DIV unaryex
   71      | mulex . MOD unaryex

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    $default  reduce using rule 66 (addex)


State 154

   67 addex: addex SUB mulex .
   69 mulex: mulex . MUL unaryex
   70      | mulex . DIV unaryex
   71      | mulex . MOD unaryex

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    $default  reduce using rule 67 (addex)


State 155

   69 mulex: mulex MUL unaryex .

    $default  reduce using rule 69 (mulex)


State 156

   70 mulex: mulex DIV unaryex .

    $default  reduce using rule 70 (mulex)


State 157

   71 mulex: mulex MOD unaryex .

    $default  reduce using rule 71 (mulex)


State 158

   40 assignex: mutable SETADD assignex .

    $default  reduce using rule 40 (assignex)


State 159

   41 assignex: mutable SETSUB assignex .

    $default  reduce using rule 41 (assignex)


State 160

   42 assignex: mutable SETMUL assignex .

    $default  reduce using rule 42 (assignex)


State 161

   43 assignex: mutable SETDIV assignex .

    $default  reduce using rule 43 (assignex)


State 162

   44 assignex: mutable SETMOD assignex .

    $default  reduce using rule 44 (assignex)


State 163

   45 assignex: mutable '+' '+' .

    $default  reduce using rule 45 (assignex)


State 164

   46 assignex: mutable '-' '-' .

    $default  reduce using rule 46 (assignex)


State 165

   36 expr: type ID '[' . ']'

    ']'  shift, and go to state 175


State 166

   37 expr: type ptrtail ID .
   38     | type ptrtail ID . '[' ']'

    '['  shift, and go to state 176

    $default  reduce using rule 37 (expr)


State 167

   34 loop: WHILE '(' expr ')' .

    $default  reduce using rule 34 (loop)


State 168

   29 closedstatem: IF '(' expr ')' . closedstatem ELSE closedstatem
   31 openstatem: IF '(' expr ')' . statement
   32           | IF '(' expr ')' . closedstatem ELSE openstatem

    ID        shift, and go to state 18
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    func_call     go to state 27
    statement     go to state 177
    simstatement  go to state 31
    closedstatem  go to state 178
    openstatem    go to state 33
    loop          go to state 34


State 169

   11 decl: type ID '[' expr . ']' ';'

    ']'  shift, and go to state 179


State 170

   12 decl: type ptrtail ID ';' .

    $default  reduce using rule 12 (decl)


State 171

   13 decl: type ptrtail ID '[' . expr ']'

    ID       shift, and go to state 39
    INTVAL   shift, and go to state 40
    FLTVAL   shift, and go to state 41
    DBLVAL   shift, and go to state 42
    STRVAL   shift, and go to state 43
    CHARVAL  shift, and go to state 44
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 45
    NOT      shift, and go to state 46
    COM      shift, and go to state 47
    CONST    shift, and go to state 48
    SIZEOF   shift, and go to state 49
    '('      shift, and go to state 50
    '+'      shift, and go to state 51
    '-'      shift, and go to state 52

    func_call  go to state 53
    expr       go to state 180
    assignex   go to state 55
    orex       go to state 56
    andex      go to state 57
    bitex      go to state 58
    relex      go to state 59
    shiftex    go to state 60
    addex      go to state 61
    mulex      go to state 62
    unaryex    go to state 63
    mutable    go to state 64
    immutable  go to state 65
    arrex      go to state 66
    primex     go to state 67
    type       go to state 68


State 172

    8 args: expr ',' args .

    $default  reduce using rule 8 (args)


State 173

   88 arrex: ID '[' expr ']' .

    $default  reduce using rule 88 (arrex)


State 174

   78 unaryex: '(' type ')' unaryex .

    $default  reduce using rule 78 (unaryex)


State 175

   36 expr: type ID '[' ']' .

    $default  reduce using rule 36 (expr)


State 176

   38 expr: type ptrtail ID '[' . ']'

    ']'  shift, and go to state 181


State 177

   31 openstatem: IF '(' expr ')' statement .

    $default  reduce using rule 31 (openstatem)


State 178

   20 statement: closedstatem .
   29 closedstatem: IF '(' expr ')' closedstatem . ELSE closedstatem
   32 openstatem: IF '(' expr ')' closedstatem . ELSE openstatem

    ELSE  shift, and go to state 182

    $default  reduce using rule 20 (statement)


State 179

   11 decl: type ID '[' expr ']' . ';'

    ';'  shift, and go to state 183


State 180

   13 decl: type ptrtail ID '[' expr . ']'

    ']'  shift, and go to state 184


State 181

   38 expr: type ptrtail ID '[' ']' .

    $default  reduce using rule 38 (expr)


State 182

   29 closedstatem: IF '(' expr ')' closedstatem ELSE . closedstatem
   32 openstatem: IF '(' expr ')' closedstatem ELSE . openstatem

    ID        shift, and go to state 18
    RETURN    shift, and go to state 19
    WHILE     shift, and go to state 20
    IF        shift, and go to state 21
    CONTINUE  shift, and go to state 22
    BREAK     shift, and go to state 23
    '{'       shift, and go to state 24
    ';'       shift, and go to state 25

    func_call     go to state 27
    simstatement  go to state 31
    closedstatem  go to state 185
    openstatem    go to state 186
    loop          go to state 34


State 183

   11 decl: type ID '[' expr ']' ';' .

    $default  reduce using rule 11 (decl)


State 184

   13 decl: type ptrtail ID '[' expr ']' .

    $default  reduce using rule 13 (decl)


State 185

   29 closedstatem: IF '(' expr ')' closedstatem ELSE closedstatem .

    $default  reduce using rule 29 (closedstatem)


State 186

   32 openstatem: IF '(' expr ')' closedstatem ELSE openstatem .

    $default  reduce using rule 32 (openstatem)
